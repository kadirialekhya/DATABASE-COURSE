-----how to create a stored procedure:

use ALEKHYA
DROP PROC MYSTOREDPROCEDURE
CREATE PROCEDURE MYSTOREDPROCEDURE
@INNUMBER INT,
@OUTNUMBER INT OUTPUT
AS
BEGIN
IF @INNUMBER<0
SET @OUTNUMBER=0
ELSE
BEGIN 
SET @OUTNUMBER=@INNUMBER+1
END
PRINT @OUTNUMBER
END

DECLARE @MYINPUT INT;
DECLARE @MYOUTPUT INT;

SET @MYINPUT=3;

EXEC MYSTOREDPROCEDURE @MYINPUT,@MYOUTPUT OUTPUT;

SELECT @MYOUTPUT

------EXCEPTIONAL HANDLING 

BEGIN TRY
   BEGIN TRANSACTION;

      DELETE FROM AdventureWorks2008R2.Production.Product
      WHERE PRODUCTID=980;

COMMIT TRANSACTION;
END TRY

BEGIN CATCH 
PRINT 'UNABLE TO DELETE PRODUCT';
IF XACT_STATE()<>0
BEGIN
ROLLBACK TRANSACTION;
END
END CATCH;

CREATE PROCEDURE HumanResources.uspGetEmployeesTest2   
    @LastName nvarchar(50),   
    @FirstName nvarchar(50)   
AS   
begin
    SET NOCOUNT ON;  
    SELECT FirstName, LastName, Department  
    FROM HumanResources.vEmployeeDepartmentHistory  
    WHERE FirstName = @FirstName AND LastName = @LastName  
    AND EndDate IS NULL;  
	end

	EXECUTE HumanResources.uspGetEmployeesTest2 N'Ackerman', N'Pilar';  
-- Or  
EXEC HumanResources.uspGetEmployeesTest2 @LastName = N'Ackerman', @FirstName = N'Pilar';  
GO  
-- Or  
EXECUTE HumanResources.uspGetEmployeesTest2 @FirstName = N'Pilar', @LastName = N'Ackerman';  
GO  

-----CREATE FUNCTION:

CREATE FUNCTION MYFIRSTFUNCTION
(@COUNTRY VARCHAR(30))
RETURNS VARCHAR(30)
AS
BEGIN
     DECLARE @RETURNC VARCHAR(30)
	 SELECT @RETURNC=CASE @COUNTRY
	 WHEN 'AL' THEN 'LO'
	 WHEN 'PIL' THEN 'TILL'
	 WHEN 'LIK' THEN 'JIK'
	 ELSE 'IOP'
END;
RETURN @RETURNC
END
----TESTING
SELECT DBO.MYFIRSTFUNCTION('LIK')

-----TABLE VALUED FUNCTION

CREATE FUNCTION DBO.GETDATERANGE
(@STARTDATE DATE,@NUMBEROFDAYS INT)
RETURNS @DATELIST TABLE(POSITION INT, DATEVALUE DATE)
AS
BEGIN
DECLARE @COUNTER INT =0
WHILE (@COUNTER < @NUMBEROFDAYS)
BEGIN
INSERT INTO @DATELIST
VALUES (@COUNTER+1,DATEADD(DAY,@COUNTER,@STARTDATE));
SET @COUNTER+=1
END
RETURN;
END
---TESTING
SELECT * FROM DBO.GETDATERANGE('12-12-2008',5)

-----INLINE TABLE FUNCTION:

CREATE FUNCTION GETLASTORDERFORCUSTOMERS
(@CUSTOMERID INT, @NUMBEROFORDERS INT)
RETURNS TABLE
AS
RETURN(SELECT TOP (@NUMBEROFORDERS) SALESORDERID,ORDERDATE,PURCHASEORDERNUMBER
FROM ADVENTUREWORKS2008R2.SALES.SALESORDERHEADER
WHERE CUSTOMERID=@CUSTOMERID
ORDER BY ORDERDATE DESC,SALESORDERID DESC
);

SELECT * FROM GETLASTORDERFORCUSTOMERS(17288,5)

-----WHILE LOOP

DECLARE @COUNTER INT;
SET @COUNTER=1;
WHILE @COUNTER<5
BEGIN
SET @COUNTER+=1;
PRINT 'THE COUNTER:' +CAST(@COUNTER AS CHAR);
END

----SQL SCALAR FUNCTION TO ACCEPT CUSTOMERID AND RETURN ACCOUNT NUMBER:

CREATE FUNCTION UF_CUTOMERFUNC
(@CUSTOMERID INT)
RETURNS VARCHAR(30)
AS
BEGIN
DECLARE @ACCOUNTNUMBER VARCHAR(30);
SELECT @ACCOUNTNUMBER=ACCOUNTNUMBER
FROM ADVENTUREWORKS2008R2.Sales.Customer
WHERE CustomerID=@CUSTOMERID
RETURN @ACCOUNTNUMBER;
END;

SELECT UF_CUTOMERFUNC(1234)

------INSERT TRIGGER

CREATE TRIGGER TR_OPPURTUNITY_INSERT
ON AdventureWorks2008R2.SALES.OPPOURTUNITY
AFTER INSERT
AS
BEGIN
SET NOCOUNT ON;
INSERT INTO AdventureWorks2008R2.Sales.SALESOPPOURTUNITY
(OPPID,ACTIONPERFORMED,ACTIONOCCUREDAT)
SELECT I.OPPID,
'I',
SYSTEMDATETIME()
FROM INSERTED I
END
-----AFTER TRIGGER
USE AdventureWorks2008R2
CREATE TRIGGER ORDERDETAILNOTDISCONTINUED
ON ADVENTUREWORKS2008R2.SALES.SALESORDERDETAIL
AFTER INSERT, UPDATE
AS
IF EXISTS
(SELECT 'TRUE'
FROM INSERTED I
JOIN Production.Product P
ON I.ProductID=P.ProductID
WHERE P.DiscontinuedDate IS NOT NULL
)
BEGIN
ROLLBACK TRANSACTION 
RAISERROR('ORDER IS DISCONTINUED TRANSACTION FAILED',16,1)
END

-----AUDITING-------

CREATE TRIGGER PRODUCTAUDIT
ON PRODUCTION.PRODUCTINVENTORY
FOR INSERT,UPDATE,DELETE
AS
BEGIN
INSERT INTO PRODUCTION.INVENTORYAUDIT
(PRODUCTIONAUDIT,NETADJUSTMENT)
SELECT COALESCE(I.PRODUCTID,D.PRODUCTID),
ISNULL(I.QUANTITY,0)- ISNULL(D.QUANTITY,0)AS NETADJUSTMENT
FROM INSERTED I
FULL JOIN DELETED D
ON I.PRODUCTID=D.PRODUCTID
AND I.LOCATIONID=D.LOCATIONID
WHERE ISNULL(I.QUANTITY,0)- ISNULL(D.QUANTITY,0)!=0;
END

--------AUTOMATION-----------

CREATE TRIGGER DOCUMENTBELONGSTOPRODUCT
ON PRODUCTION.PRODUCTDOCUMENT
FOR INSERT
AS
BEGIN
DECLARE @COUNT INT
SELECT @COUNT=COUNT(*) FROM INSERTED;
IF @COUNT>0
BEGIN
UPDATE P
SET P.INVENTORYFLAG=1
FROM INVENTORY I
JOIN PRODUCTION.PRODUCT P
ON I.PRODUCTID=P.PRODUCTID
END
IF @@ERROR !=0
ROLLBACK TRANSACTION;
END
